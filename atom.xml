<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sire的技术生活</title>
  <subtitle>打造自己心中的世界</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-07-07T10:12:50.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sire</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>内存泄露分析</title>
    <link href="http://yoursite.com/2016/07/07/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%88%86%E6%9E%90/"/>
    <id>http://yoursite.com/2016/07/07/内存泄露分析/</id>
    <published>2016-07-07T10:07:28.000Z</published>
    <updated>2016-07-07T10:12:50.000Z</updated>
    
    <content type="html">&lt;p&gt;内存泄露是个程序开发中经久不衰的话题，外行人看应用外观设计，内容组织方式,来判断程序做的怎样；内行人看打开开发软件，通过观察代码架构，质量以及内存变化来判断应用质量的高低。&lt;/p&gt;
&lt;p&gt;因为移动端硬件设备自身的特点，内存较小，在内存的处理上尤为重要，优秀的内存处理能增加应用的流畅性，减少内存占用，提升性能，避免出现OOM异常或者是其他因对象释放而造成的程序崩溃。。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;内存泄露的定义&quot;&gt;&lt;a href=&quot;#内存泄露的定义&quot; class=&quot;headerlink&quot; title=&quot;内存泄露的定义&quot;&gt;&lt;/a&gt;内存泄露的定义&lt;/h2&gt;&lt;h2 id=&quot;定义的方式有两种&quot;&gt;&lt;a href=&quot;#定义的方式有两种&quot; class=&quot;headerlink&quot; title=&quot;定义的方式有两种&quot;&gt;&lt;/a&gt;定义的方式有两种&lt;/h2&gt;&lt;p&gt;1.所有对象的强引用都已经不存在，但是对象仍在内存中&lt;/p&gt;
&lt;p&gt;2.无用对象由于强引用没有及时释放，占用内存&lt;/p&gt;
&lt;p&gt;#内存泄露几种常见情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;嵌套类，闭包，匿名内部类引起内存泄露&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　　　循环强引用是造成内存泄露的一种常见方式。无论是java还是swift,类都可以进行嵌套。内部类持有外部类的引用，可以直接访问外部类，这是优势，方便了方法的调用和值的传递，但也正是因为如此，内部类很容易造成内存泄露。当外部类持有内部类一个对象的强引用的时候，就会形成形成了循环强引用。类似的java中的匿名内部类和swift以及OC中的闭包都会捕获上下文对象的引用，当闭包的生命周期超过上下文对象应有的生命周期时就会发生暂时性的内存泄露，比如开启一个线程，在java中我们会使用一个Runnable对象，这个对象捕获了上下文对象的引用，，runnable对象不会结束，线程的任务就不结束，runnable对象对上下文对象的强引用就不会释放，上下文对象属于无用的对象就造成了内存泄露，闭包同理。如果上下文对象对runnale对象持有强引用，那么将形成循环强引用，彼此永远无法释放。&lt;br&gt;　　&lt;br&gt;　　&lt;br&gt;　　&lt;br&gt;　　　　iOS和Android都是单线程模型，两个平台所使用的语言中都使用runloop方式来解决事件排队问题，Android使用handler机制来做事件排队或者切换线程执行任务，当发送runnalbe任务时会造成短时间的上下文对象的内存泄露，比如我进入一个acitity活动页面，在第一个生命周期方法中使用handler向主线程发送一个runnable任务延时十秒执行，我进入页面后立即退出，观察内存可以发现activity对象并没有立即被销毁，而是过了十秒之后，当然可能是十一秒，也可能是十五秒，因为java的垃圾回收机制并不是时时刻刻都在回收的。iOS使用performSelector方法实现同样的功能，同理selector方法也会造成短时间的上下文内存泄露。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;静态方法引起内存泄露&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　　静态引用持有的对象的生命周期与整个应用一样长，因此静态引用如果持有一个大额数据对象，那么造成的内存泄露是十分严重的，比如Android中的context对象，视图对象等，使用静态引用一定要谨慎，当然静态引用也能在某些情况为性能的优化做出贡献，比如多次重复性的创建同一个大内存对象，我们可以在可控的范畴里将对象定义为静态引用，避免重复创建，在适当的生命周期方法中置空静态引用就行了
　　　&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;　　　上面讨论的内存泄露情况都是每一次的操作上的内存泄露，假设一个iOS应用中的一个页面，用户进入一次就造成controller循环强引用的内存泄露,那么多次操作这种内存泄露就会累计，可以想象，如果用户重复操作页面的进入与退出，应用肯定会因为内存泄露而崩溃，因此一个优秀的应用，内存上的优化处理是十分必要的。
　　　&lt;/p&gt;
&lt;p&gt;##内存泄露的解决方案&lt;/p&gt;
&lt;p&gt;　　　我认为对象的引用关系不能仅仅以直接引用持有关系来判定，比如A对象的成员属性中有B对象，那么我们称A对象持有B对象的引用，如果B对象中的成员属性中有C对象，那么我们称B对象持有C对象的引用，如果此时C中的成员属性有A对象，那么这三者又会形成循环强引用，一种间接的循环强引用，这种间接形成的循环强引用大多数时候是不易察觉的，因此我们所能做的是在类中持有对象引用的时候要万分注意，思考和避免强引用的形成。&lt;/p&gt;
&lt;p&gt;　　对象的释放是有顺序的，一个对象无法释放，这个对象内部持有的强引用的对象也将无法释放；一个对象一旦释放，那么这个对象所持有的所有引用也将释放。举个例子，比如controller对象无法释放，那么controller对象所持有的其他对象比如视图对象view，其他的一些开发者自己定义的对象都无法释放。&lt;br&gt;我建议持有系统组件对象比如Android的Activity，iOS的UIViewController的引用都为弱引用，唯一的强引用让系统框架自身持有，这样能很大程度避免内存泄露，这也就要求了，在使用组件对象作为代理模式中的代理对象的时候，代理对象的引用要为弱引用，我们可以翻看iOS的部分View组件的源码，比如UITableView，它的delegate和dataSource代理对象的引用都是弱引用，我们大多数时候都会将controller或者Activity作为代理，因此这样去定义代理对象的引用是十分必要的。我们经常自定义view，然后将view的相关行为方法通过接口代理出去，试想，如果view中的代理对象是强引用，并将代理对象设置为controller而自定义view在controller持有的对象view中，这就形成了间接的循环强应用，造成了内存泄露&lt;/p&gt;
&lt;p&gt;尽量保证一个对象只有一个强引用，这也是解决循环强引用的方式。系统对象的引用尽量为弱引用，因为强引用在系统框架中已经有了。&lt;/p&gt;
&lt;p&gt;在某些情况下，弱引用的使用能给我们的开发带来便利。我们经常需要解决一种情况，页面已经回退，但是请求仍然没有着陆在外面飞，造成了暂时性的业务逻辑对象的内存泄露；在swift中如果使用unowned self来声明不捕获业务逻辑对象有时候会造成崩溃，原因很简单，就是对象已经被回收了，但是在网络回调方法中试图调用这个对象的方法。&lt;/p&gt;
&lt;p&gt;我们可以网络回调方法中使用若引用来修饰逻辑对象，在controller中使用业务对象的强引用。当页面回退后，controller对象销毁，那么业务逻辑对象的强引用也销毁ARC引用计数个数为0，业务逻辑对象销毁，网络请求回来后，若引用业务逻辑对象已经被回收，方法就不会调用，省去了很多对象非空的判断，代码也更加优雅。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;内存泄露是个程序开发中经久不衰的话题，外行人看应用外观设计，内容组织方式,来判断程序做的怎样；内行人看打开开发软件，通过观察代码架构，质量以及内存变化来判断应用质量的高低。&lt;/p&gt;
&lt;p&gt;因为移动端硬件设备自身的特点，内存较小，在内存的处理上尤为重要，优秀的内存处理能增加应用的流畅性，减少内存占用，提升性能，避免出现OOM异常或者是其他因对象释放而造成的程序崩溃。。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;内存泄露的定义&quot;&gt;&lt;a href=&quot;#内存泄露的定义&quot; class=&quot;headerlink&quot; title=&quot;内存泄露的定义&quot;&gt;&lt;/a&gt;内存泄露的定义&lt;/h2&gt;&lt;h2 id=&quot;定义的方式有两种&quot;&gt;&lt;a href=&quot;#定义的方式有两种&quot; class=&quot;headerlink&quot; title=&quot;定义的方式有两种&quot;&gt;&lt;/a&gt;定义的方式有两种&lt;/h2&gt;&lt;p&gt;1.所有对象的强引用都已经不存在，但是对象仍在内存中&lt;/p&gt;
&lt;p&gt;2.无用对象由于强引用没有及时释放，占用内存&lt;/p&gt;
&lt;p&gt;#内存泄露几种常见情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;嵌套类，闭包，匿名内部类引起内存泄露&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;　　　　循环强引用是造成内存泄露的一种常见方式。无论是java还是swift,类都可以进行嵌套。内部类持有外部类的引用，可以直接访问外部类，这是优势，方便了方法的调用和值的传递，但也正是因为如此，内部类很容易造成内存泄露。当外部类持有内部类一个对象的强引用的时候，就会形成形成了循环强引用。类似的java中的匿名内部类和swift以及OC中的闭包都会捕获上下文对象的引用，当闭包的生命周期超过上下文对象应有的生命周期时就会发生暂时性的内存泄露，比如开启一个线程，在java中我们会使用一个Runnable对象，这个对象捕获了上下文对象的引用，，runnable对象不会结束，线程的任务就不结束，runnable对象对上下文对象的强引用就不会释放，上下文对象属于无用的对象就造成了内存泄露，闭包同理。如果上下文对象对runnale对象持有强引用，那么将形成循环强引用，彼此永远无法释放。&lt;br&gt;　　&lt;br&gt;　　&lt;br&gt;　　&lt;br&gt;　　　　iOS和Android都是单线程模型，两个平台所使用的语言中都使用runloop方式来解决事件排队问题，Android使用handler机制来做事件排队或者切换线程执行任务，当发送runnalbe任务时会造成短时间的上下文对象的内存泄露，比如我进入一个acitity活动页面，在第一个生命周期方法中使用handler向主线程发送一个runnable任务延时十秒执行，我进入页面后立即退出，观察内存可以发现activity对象并没有立即被销毁，而是过了十秒之后，当然可能是十一秒，也可能是十五秒，因为java的垃圾回收机制并不是时时刻刻都在回收的。iOS使用performSelector方法实现同样的功能，同理selector方法也会造成短时间的上下文内存泄露。&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="技术教程" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Cocopods高级教程</title>
    <link href="http://yoursite.com/2016/05/17/Cocopods%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2016/05/17/Cocopods高级教程/</id>
    <published>2016-05-17T08:59:53.000Z</published>
    <updated>2016-05-17T09:16:55.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;cocopods安装&quot;&gt;&lt;a href=&quot;#cocopods安装&quot; class=&quot;headerlink&quot; title=&quot;cocopods安装&quot;&gt;&lt;/a&gt;cocopods安装&lt;/h2&gt;&lt;p&gt;　　本教程默认Mac已经安装Ruby环境，如果没有安装Ruby，请自行搜索。　&lt;br&gt;　　如果电脑没有安装cocopods,打开终端输入以下命令：        &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　如果由于网络原因无法下载cocopods，那么我建议你使用淘宝镜像下载，具体的方式请自行搜索，并非本文重点。&lt;br&gt;如果已经安装，那么我建议你将cocopods更新到最新稳定版本，命令与上面一样。        &lt;/p&gt;
&lt;h2 id=&quot;使用cocopods拉取远依赖库&quot;&gt;&lt;a href=&quot;#使用cocopods拉取远依赖库&quot; class=&quot;headerlink&quot; title=&quot;使用cocopods拉取远依赖库&quot;&gt;&lt;/a&gt;使用cocopods拉取远依赖库&lt;/h2&gt;&lt;p&gt;　　在拉取之前你必须确定你已经安装了cocopods。步骤如下&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建一个新的ios项目&lt;/li&gt;
&lt;li&gt;打开电脑终端窗口 &lt;code&gt;$ cd&lt;/code&gt; 进入你的项目根目录&lt;/li&gt;
&lt;li&gt;使用$ &lt;code&gt;pod init&lt;/code&gt; 命令创建一个Podfile文件&lt;/li&gt;
&lt;li&gt;第一行你应当定义你支持的平台和版本，比如&lt;br&gt;&lt;code&gt;platform :ios, &amp;#39;9.0&amp;#39;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建目标应用部分，使用 &lt;code&gt;target &amp;#39;$TARGET_NAME&amp;#39; do&lt;/code&gt; 开头和 &lt;code&gt;end&lt;/code&gt;结束，例如        &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;target &amp;apos;MyApp&amp;apos; do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;ObjectiveSugar&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后保存的你Podfile文件，执行 &lt;code&gt;$ pod install&lt;/code&gt; 命令，将会自动创建新文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;找到文件中的  &lt;code&gt;&amp;#39;$TARGET_NAME&amp;#39;.xcworkspace&lt;/code&gt;,点击打开，这个文件将是你以后使用的项目打开文件。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Pod命令简介&quot;&gt;&lt;a href=&quot;#Pod命令简介&quot; class=&quot;headerlink&quot; title=&quot;Pod命令简介&quot;&gt;&lt;/a&gt;Pod命令简介&lt;/h2&gt;&lt;p&gt;　　许多开始使用cocopods的新手似乎都不大能分清&lt;code&gt;pod install&lt;/code&gt;和&lt;code&gt;pod update&lt;/code&gt;的作用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pod install&lt;/code&gt;:第一次给项目安装cocopods时使用，在已经有cocopods环境的项目中添加或者删除依赖库时使用。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pod update&lt;/code&gt;:主要是用来升级依赖库的版本，其中加上依赖库名字，比如 &lt;code&gt;pod update PODNAME&lt;/code&gt;将只更新这个依赖库的版本。&lt;br&gt;如果装载新的依赖库速度过慢，可以使用命令&lt;code&gt;pod install --verbose --no-repo-update&lt;/code&gt;来替代&lt;code&gt;pod install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Podfile文件&quot;&gt;&lt;a href=&quot;#Podfile文件&quot; class=&quot;headerlink&quot; title=&quot;Podfile文件&quot;&gt;&lt;/a&gt;Podfile文件&lt;/h2&gt;&lt;p&gt;　　支持一个target的podfile可能是这样子的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;target &amp;apos;MyApp&amp;apos; do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;AFNetworking&amp;apos;, &amp;apos;~&amp;gt; 3.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　end&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;　　如果你有多个target，不同的target使用不同的库，互不影响，那么可能是这样子的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;abstract_target &amp;apos;Shows&amp;apos; do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;ShowsKit&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;Fabric&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Has its own copy of ShowsKit + ShowWebAuth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target &amp;apos;ShowsiOS&amp;apos; do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;ShowWebAuth&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Has its own copy of ShowsKit + ShowTVAuth&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;target &amp;apos;ShowsTV&amp;apos; do&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;ShowTVAuth&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;end&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;en&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;依赖库的版本&quot;&gt;&lt;a href=&quot;#依赖库的版本&quot; class=&quot;headerlink&quot; title=&quot;依赖库的版本&quot;&gt;&lt;/a&gt;依赖库的版本&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果你希望使用库最新的版本就那么只要：&lt;br&gt;&lt;code&gt;pod &amp;#39;SSZipArchive&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果你希望使用库的某个特定版本：&lt;br&gt;&lt;code&gt;pod &amp;#39;Objection&amp;#39;, &amp;#39;0.9&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用操作符来定义&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;‘&amp;gt; 0.1’ 任何大于0.1的版本&lt;/li&gt;
&lt;li&gt;‘&amp;gt;= 0.1’ 任何大于或者等于0.1的版本&lt;/li&gt;
&lt;li&gt;‘&amp;lt; 0.1’ 任何小于0.1的版本&lt;/li&gt;
&lt;li&gt;‘&amp;lt;= 0.1’ 任何小于或者等于0.1的版本&lt;/li&gt;
&lt;li&gt;‘~&amp;gt; 0.1.2’ 大于等于0.1.2版本，小于0.2版本&lt;/li&gt;
&lt;li&gt;‘~&amp;gt; 0.1’ 大于等于0.1版本，小于1.0版本&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;库的路径&quot;&gt;&lt;a href=&quot;#库的路径&quot; class=&quot;headerlink&quot; title=&quot;库的路径&quot;&gt;&lt;/a&gt;库的路径&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;依赖于本地库：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;AFNetworking&amp;apos;, :path =&amp;gt; &amp;apos;~/Documents/AFNetworking&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用github上项目的master主干仓库：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;AFNetworking&amp;apos;, :git =&amp;gt; &amp;apos;https://github.com/gowalla/AFNetworking.git&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用github上项目分支仓库：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;AFNetworking&amp;apos;, :git =&amp;gt; &amp;apos;https://github.com/gowalla/AFNetworking.git&amp;apos;, :branch =&amp;gt; &amp;apos;dev&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;使用特定的tag版本仓库：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;AFNetworking&amp;apos;, :git =&amp;gt; &amp;apos;https://github.com/gowalla/AFNetworking.git&amp;apos;, :tag =&amp;gt; &amp;apos;0.7.0&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;使用某次提交的仓库：&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod &amp;apos;AFNetworking&amp;apos;, :git =&amp;gt; &amp;apos;https://github.com/gowalla/AFNetworking.git&amp;apos;, :commit =&amp;gt; &amp;apos;082f8319af&amp;apos;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;创建自己的cocopods依赖库&quot;&gt;&lt;a href=&quot;#创建自己的cocopods依赖库&quot; class=&quot;headerlink&quot; title=&quot;创建自己的cocopods依赖库&quot;&gt;&lt;/a&gt;创建自己的cocopods依赖库&lt;/h2&gt;&lt;p&gt;　　我推荐你用官方自动生成的模板来构建自己的库项目，避免自己动手去构建的错误，比如语法错误，文件位置错误。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;选择好文件位置，创建自己的库项目&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pod lib create MyLib&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;期间会有些选择，根据自己的需求去打命令选择。主要有    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Objective-C or Swift&lt;/li&gt;
&lt;li&gt;Making a Demo Application&lt;/li&gt;
&lt;li&gt;Choosing a Test Framework&lt;/li&gt;
&lt;li&gt;View-based Testing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后的目录如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MyLib&lt;br&gt;├── .travis.yml&lt;br&gt;├── _Pods.xcproject&lt;br&gt;├── Example&lt;br&gt;│   ├── MyLib&lt;br&gt;│   ├── MyLib.xcodeproj&lt;br&gt;│   ├── MyLib.xcworkspace&lt;br&gt;│   ├── Podfile&lt;br&gt;│   ├── Podfile.lock&lt;br&gt;│   ├── Pods&lt;br&gt;│   └── Tests&lt;br&gt;├── LICENSE&lt;br&gt;├── MyLib.podspec&lt;br&gt;├── Pod&lt;br&gt;│   ├── Assets&lt;br&gt;│   └── Classes&lt;br&gt;│     └── RemoveMe.[swift/m]&lt;br&gt;└── README.md&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;–&lt;br&gt;　　这个文件中自动包含了license , readme.md , pod描述文件。你所要做的事情就是将你的代码嵌入进去，并修改 podspec中的summary描述文字，&lt;code&gt;&amp;lt;GITHUB NAME&amp;gt;&lt;/code&gt;为你的github账户名，可选的修改和添加其他字段属性。在修改spec文件的时候要注意语法错误往往都是双引号或者单引号引起的，有的文本编辑器默认更改了了spec文件的双引号和单引号类型，你可以更正过来，一般单引号都是使用键盘上面数字1左边的的键位上的单引号，双引号可以复制其他正确引用的单引号。&lt;br&gt;　　Pod文件是你存放自己的库的地方，Example是库的使用示例代码，你可以向使用者展示下如何使用你的库。&lt;br&gt;　　注意，如果你的库是由swift语言编写，那么你需要将需要暴露给使用者的类，接口，和方法等等声明为public，否则可能会出现访问不到该类的情况。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将自己的库代码嵌入项目&lt;br&gt;在xcode编辑界面中，将自己的库代码放入 Development Pods文件夹，然后执行&lt;code&gt;pod update&lt;/code&gt;,注意库的权限一定要是public，然后项目重新编译一下。在需要使用到库的类中导入库  &lt;code&gt;import ANNetworking&lt;/code&gt; ，我建议你在自己的Example中检查下库的可用性。&lt;/li&gt;
&lt;li&gt;使用git工具将项目push到自己的github仓库中&lt;/li&gt;
&lt;li&gt;realse版本发布的准备&lt;br&gt;当你即将发布自己的库到cocopods的时候，你需要先使用命令&lt;code&gt;pod lib lint&lt;/code&gt;来检查下pod描述文件是否有错误，确认无误，给你的项目打上版本tag,并且push,命令如下&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;$ git add -A &amp;amp;&amp;amp; git commit -m &amp;quot;Release 0.0.1.&amp;quot;

$ git tag &amp;apos;0.0.1&amp;apos;

$ git push --tags
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;部署自己的库&lt;br&gt;在部署前先要进行错误检查，使用命令&lt;code&gt;pod lib lint&lt;/code&gt;和&lt;code&gt;pod spec lint&lt;/code&gt;,二者的区别在于，前者只会进行本地校验，后者进行github仓库和tag校验。&lt;/li&gt;
&lt;li&gt;将pod描述文件推送到pod服务器，网络畅通情况下，一到两分钟就能看到成功的结果，命令如下：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;　　pod trunk push NAME.podspec&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;完成后搜索下自己传上去的库，&lt;code&gt;pod search NAME&lt;/code&gt;,最好能自己试用一下。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;cocopods安装&quot;&gt;&lt;a href=&quot;#cocopods安装&quot; class=&quot;headerlink&quot; title=&quot;cocopods安装&quot;&gt;&lt;/a&gt;cocopods安装&lt;/h2&gt;&lt;p&gt;　　本教程默认Mac已经安装Ruby环境，如果没有安装Ruby，请自行搜索。　&lt;br&gt;　　如果电脑没有安装cocopods,打开终端输入以下命令：        &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　如果由于网络原因无法下载cocopods，那么我建议你使用淘宝镜像下载，具体的方式请自行搜索，并非本文重点。&lt;br&gt;如果已经安装，那么我建议你将cocopods更新到最新稳定版本，命令与上面一样。        &lt;/p&gt;
&lt;h2 id=&quot;使用cocopods拉取远依赖库&quot;&gt;&lt;a href=&quot;#使用cocopods拉取远依赖库&quot; class=&quot;headerlink&quot; title=&quot;使用cocopods拉取远依赖库&quot;&gt;&lt;/a&gt;使用cocopods拉取远依赖库&lt;/h2&gt;&lt;p&gt;　　在拉取之前你必须确定你已经安装了cocopods。步骤如下&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="技术教程" scheme="http://yoursite.com/tags/%E6%8A%80%E6%9C%AF%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
