<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[内存泄露分析]]></title>
      <url>http://yoursite.com/2016/07/07/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<p>内存泄露是个程序开发中经久不衰的话题，外行人看应用外观设计，内容组织方式,来判断程序做的怎样；内行人看打开开发软件，通过观察代码架构，质量以及内存变化来判断应用质量的高低。</p>
<p>因为移动端硬件设备自身的特点，内存较小，在内存的处理上尤为重要，优秀的内存处理能增加应用的流畅性，减少内存占用，提升性能，避免出现OOM异常或者是其他因对象释放而造成的程序崩溃。。</p>
<hr>
<h2 id="内存泄露的定义"><a href="#内存泄露的定义" class="headerlink" title="内存泄露的定义"></a>内存泄露的定义</h2><h2 id="定义的方式有两种"><a href="#定义的方式有两种" class="headerlink" title="定义的方式有两种"></a>定义的方式有两种</h2><p>1.所有对象的强引用都已经不存在，但是对象仍在内存中</p>
<p>2.无用对象由于强引用没有及时释放，占用内存</p>
<p>#内存泄露几种常见情况</p>
<ul>
<li><strong>嵌套类，闭包，匿名内部类引起内存泄露</strong></li>
</ul>
<p>　　　　循环强引用是造成内存泄露的一种常见方式。无论是java还是swift,类都可以进行嵌套。内部类持有外部类的引用，可以直接访问外部类，这是优势，方便了方法的调用和值的传递，但也正是因为如此，内部类很容易造成内存泄露。当外部类持有内部类一个对象的强引用的时候，就会形成形成了循环强引用。类似的java中的匿名内部类和swift以及OC中的闭包都会捕获上下文对象的引用，当闭包的生命周期超过上下文对象应有的生命周期时就会发生暂时性的内存泄露，比如开启一个线程，在java中我们会使用一个Runnable对象，这个对象捕获了上下文对象的引用，，runnable对象不会结束，线程的任务就不结束，runnable对象对上下文对象的强引用就不会释放，上下文对象属于无用的对象就造成了内存泄露，闭包同理。如果上下文对象对runnale对象持有强引用，那么将形成循环强引用，彼此永远无法释放。<br>　　<br>　　<br>　　<br>　　　　iOS和Android都是单线程模型，两个平台所使用的语言中都使用runloop方式来解决事件排队问题，Android使用handler机制来做事件排队或者切换线程执行任务，当发送runnalbe任务时会造成短时间的上下文对象的内存泄露，比如我进入一个acitity活动页面，在第一个生命周期方法中使用handler向主线程发送一个runnable任务延时十秒执行，我进入页面后立即退出，观察内存可以发现activity对象并没有立即被销毁，而是过了十秒之后，当然可能是十一秒，也可能是十五秒，因为java的垃圾回收机制并不是时时刻刻都在回收的。iOS使用performSelector方法实现同样的功能，同理selector方法也会造成短时间的上下文内存泄露。<br><a id="more"></a></p>
<ul>
<li><strong>静态方法引起内存泄露</strong></li>
</ul>
<p>　　　静态引用持有的对象的生命周期与整个应用一样长，因此静态引用如果持有一个大额数据对象，那么造成的内存泄露是十分严重的，比如Android中的context对象，视图对象等，使用静态引用一定要谨慎，当然静态引用也能在某些情况为性能的优化做出贡献，比如多次重复性的创建同一个大内存对象，我们可以在可控的范畴里将对象定义为静态引用，避免重复创建，在适当的生命周期方法中置空静态引用就行了
　　　</p>
<hr>
<p>　　　上面讨论的内存泄露情况都是每一次的操作上的内存泄露，假设一个iOS应用中的一个页面，用户进入一次就造成controller循环强引用的内存泄露,那么多次操作这种内存泄露就会累计，可以想象，如果用户重复操作页面的进入与退出，应用肯定会因为内存泄露而崩溃，因此一个优秀的应用，内存上的优化处理是十分必要的。
　　　</p>
<p>##内存泄露的解决方案</p>
<p>　　　我认为对象的引用关系不能仅仅以直接引用持有关系来判定，比如A对象的成员属性中有B对象，那么我们称A对象持有B对象的引用，如果B对象中的成员属性中有C对象，那么我们称B对象持有C对象的引用，如果此时C中的成员属性有A对象，那么这三者又会形成循环强引用，一种间接的循环强引用，这种间接形成的循环强引用大多数时候是不易察觉的，因此我们所能做的是在类中持有对象引用的时候要万分注意，思考和避免强引用的形成。</p>
<p>　　对象的释放是有顺序的，一个对象无法释放，这个对象内部持有的强引用的对象也将无法释放；一个对象一旦释放，那么这个对象所持有的所有引用也将释放。举个例子，比如controller对象无法释放，那么controller对象所持有的其他对象比如视图对象view，其他的一些开发者自己定义的对象都无法释放。<br>我建议持有系统组件对象比如Android的Activity，iOS的UIViewController的引用都为弱引用，唯一的强引用让系统框架自身持有，这样能很大程度避免内存泄露，这也就要求了，在使用组件对象作为代理模式中的代理对象的时候，代理对象的引用要为弱引用，我们可以翻看iOS的部分View组件的源码，比如UITableView，它的delegate和dataSource代理对象的引用都是弱引用，我们大多数时候都会将controller或者Activity作为代理，因此这样去定义代理对象的引用是十分必要的。我们经常自定义view，然后将view的相关行为方法通过接口代理出去，试想，如果view中的代理对象是强引用，并将代理对象设置为controller而自定义view在controller持有的对象view中，这就形成了间接的循环强应用，造成了内存泄露</p>
<p>尽量保证一个对象只有一个强引用，这也是解决循环强引用的方式。系统对象的引用尽量为弱引用，因为强引用在系统框架中已经有了。</p>
<p>在某些情况下，弱引用的使用能给我们的开发带来便利。我们经常需要解决一种情况，页面已经回退，但是请求仍然没有着陆在外面飞，造成了暂时性的业务逻辑对象的内存泄露；在swift中如果使用unowned self来声明不捕获业务逻辑对象有时候会造成崩溃，原因很简单，就是对象已经被回收了，但是在网络回调方法中试图调用这个对象的方法。</p>
<p>我们可以网络回调方法中使用若引用来修饰逻辑对象，在controller中使用业务对象的强引用。当页面回退后，controller对象销毁，那么业务逻辑对象的强引用也销毁ARC引用计数个数为0，业务逻辑对象销毁，网络请求回来后，若引用业务逻辑对象已经被回收，方法就不会调用，省去了很多对象非空的判断，代码也更加优雅。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Cocopods高级教程]]></title>
      <url>http://yoursite.com/2016/05/17/Cocopods%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="cocopods安装"><a href="#cocopods安装" class="headerlink" title="cocopods安装"></a>cocopods安装</h2><p>　　本教程默认Mac已经安装Ruby环境，如果没有安装Ruby，请自行搜索。　<br>　　如果电脑没有安装cocopods,打开终端输入以下命令：        </p>
<pre><code>$ sudo gem install cocoapods
</code></pre><p>　如果由于网络原因无法下载cocopods，那么我建议你使用淘宝镜像下载，具体的方式请自行搜索，并非本文重点。<br>如果已经安装，那么我建议你将cocopods更新到最新稳定版本，命令与上面一样。        </p>
<h2 id="使用cocopods拉取远依赖库"><a href="#使用cocopods拉取远依赖库" class="headerlink" title="使用cocopods拉取远依赖库"></a>使用cocopods拉取远依赖库</h2><p>　　在拉取之前你必须确定你已经安装了cocopods。步骤如下<br><a id="more"></a></p>
<ul>
<li>创建一个新的ios项目</li>
<li>打开电脑终端窗口 <code>$ cd</code> 进入你的项目根目录</li>
<li>使用$ <code>pod init</code> 命令创建一个Podfile文件</li>
<li>第一行你应当定义你支持的平台和版本，比如<br><code>platform :ios, &#39;9.0&#39;</code></li>
<li><p>创建目标应用部分，使用 <code>target &#39;$TARGET_NAME&#39; do</code> 开头和 <code>end</code>结束，例如        </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target &apos;MyApp&apos; do</span><br><span class="line">pod &apos;ObjectiveSugar&apos;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后保存的你Podfile文件，执行 <code>$ pod install</code> 命令，将会自动创建新文件</p>
</li>
<li>找到文件中的  <code>&#39;$TARGET_NAME&#39;.xcworkspace</code>,点击打开，这个文件将是你以后使用的项目打开文件。</li>
</ul>
<h2 id="Pod命令简介"><a href="#Pod命令简介" class="headerlink" title="Pod命令简介"></a>Pod命令简介</h2><p>　　许多开始使用cocopods的新手似乎都不大能分清<code>pod install</code>和<code>pod update</code>的作用</p>
<ul>
<li><code>pod install</code>:第一次给项目安装cocopods时使用，在已经有cocopods环境的项目中添加或者删除依赖库时使用。</li>
<li><code>pod update</code>:主要是用来升级依赖库的版本，其中加上依赖库名字，比如 <code>pod update PODNAME</code>将只更新这个依赖库的版本。<br>如果装载新的依赖库速度过慢，可以使用命令<code>pod install --verbose --no-repo-update</code>来替代<code>pod install</code></li>
</ul>
<h2 id="Podfile文件"><a href="#Podfile文件" class="headerlink" title="Podfile文件"></a>Podfile文件</h2><p>　　支持一个target的podfile可能是这样子的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target &apos;MyApp&apos; do</span><br><span class="line">pod &apos;AFNetworking&apos;, &apos;~&gt; 3.0&apos;</span><br><span class="line">　end</span><br></pre></td></tr></table></figure>
<p>　　如果你有多个target，不同的target使用不同的库，互不影响，那么可能是这样子的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">abstract_target &apos;Shows&apos; do</span><br><span class="line">pod &apos;ShowsKit&apos;</span><br><span class="line">pod &apos;Fabric&apos;</span><br><span class="line"></span><br><span class="line"># Has its own copy of ShowsKit + ShowWebAuth</span><br><span class="line">target &apos;ShowsiOS&apos; do</span><br><span class="line">pod &apos;ShowWebAuth&apos;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"># Has its own copy of ShowsKit + ShowTVAuth</span><br><span class="line">target &apos;ShowsTV&apos; do</span><br><span class="line">pod &apos;ShowTVAuth&apos;</span><br><span class="line">end</span><br><span class="line">en</span><br></pre></td></tr></table></figure>
<h2 id="依赖库的版本"><a href="#依赖库的版本" class="headerlink" title="依赖库的版本"></a>依赖库的版本</h2><ul>
<li><p>如果你希望使用库最新的版本就那么只要：<br><code>pod &#39;SSZipArchive&#39;</code></p>
</li>
<li><p>如果你希望使用库的某个特定版本：<br><code>pod &#39;Objection&#39;, &#39;0.9&#39;</code></p>
</li>
<li><p>使用操作符来定义</p>
</li>
</ul>
<ul>
<li>‘&gt; 0.1’ 任何大于0.1的版本</li>
<li>‘&gt;= 0.1’ 任何大于或者等于0.1的版本</li>
<li>‘&lt; 0.1’ 任何小于0.1的版本</li>
<li>‘&lt;= 0.1’ 任何小于或者等于0.1的版本</li>
<li>‘~&gt; 0.1.2’ 大于等于0.1.2版本，小于0.2版本</li>
<li>‘~&gt; 0.1’ 大于等于0.1版本，小于1.0版本</li>
</ul>
<h2 id="库的路径"><a href="#库的路径" class="headerlink" title="库的路径"></a>库的路径</h2><ul>
<li><p>依赖于本地库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;AFNetworking&apos;, :path =&gt; &apos;~/Documents/AFNetworking&apos;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用github上项目的master主干仓库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;AFNetworking&apos;, :git =&gt; &apos;https://github.com/gowalla/AFNetworking.git&apos;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用github上项目分支仓库：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;AFNetworking&apos;, :git =&gt; &apos;https://github.com/gowalla/AFNetworking.git&apos;, :branch =&gt; &apos;dev&apos;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用特定的tag版本仓库：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;AFNetworking&apos;, :git =&gt; &apos;https://github.com/gowalla/AFNetworking.git&apos;, :tag =&gt; &apos;0.7.0&apos;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用某次提交的仓库：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;AFNetworking&apos;, :git =&gt; &apos;https://github.com/gowalla/AFNetworking.git&apos;, :commit =&gt; &apos;082f8319af&apos;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="创建自己的cocopods依赖库"><a href="#创建自己的cocopods依赖库" class="headerlink" title="创建自己的cocopods依赖库"></a>创建自己的cocopods依赖库</h2><p>　　我推荐你用官方自动生成的模板来构建自己的库项目，避免自己动手去构建的错误，比如语法错误，文件位置错误。</p>
<ul>
<li><p>选择好文件位置，创建自己的库项目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib create MyLib</span><br></pre></td></tr></table></figure>
</li>
<li><p>期间会有些选择，根据自己的需求去打命令选择。主要有    </p>
<ul>
<li>Objective-C or Swift</li>
<li>Making a Demo Application</li>
<li>Choosing a Test Framework</li>
<li>View-based Testing</li>
</ul>
</li>
</ul>
<p>最后的目录如下：</p>
<blockquote>
<p>MyLib<br>├── .travis.yml<br>├── _Pods.xcproject<br>├── Example<br>│   ├── MyLib<br>│   ├── MyLib.xcodeproj<br>│   ├── MyLib.xcworkspace<br>│   ├── Podfile<br>│   ├── Podfile.lock<br>│   ├── Pods<br>│   └── Tests<br>├── LICENSE<br>├── MyLib.podspec<br>├── Pod<br>│   ├── Assets<br>│   └── Classes<br>│     └── RemoveMe.[swift/m]<br>└── README.md</p>
</blockquote>
<p>–<br>　　这个文件中自动包含了license , readme.md , pod描述文件。你所要做的事情就是将你的代码嵌入进去，并修改 podspec中的summary描述文字，<code>&lt;GITHUB NAME&gt;</code>为你的github账户名，可选的修改和添加其他字段属性。在修改spec文件的时候要注意语法错误往往都是双引号或者单引号引起的，有的文本编辑器默认更改了了spec文件的双引号和单引号类型，你可以更正过来，一般单引号都是使用键盘上面数字1左边的的键位上的单引号，双引号可以复制其他正确引用的单引号。<br>　　Pod文件是你存放自己的库的地方，Example是库的使用示例代码，你可以向使用者展示下如何使用你的库。<br>　　注意，如果你的库是由swift语言编写，那么你需要将需要暴露给使用者的类，接口，和方法等等声明为public，否则可能会出现访问不到该类的情况。</p>
<ul>
<li>将自己的库代码嵌入项目<br>在xcode编辑界面中，将自己的库代码放入 Development Pods文件夹，然后执行<code>pod update</code>,注意库的权限一定要是public，然后项目重新编译一下。在需要使用到库的类中导入库  <code>import ANNetworking</code> ，我建议你在自己的Example中检查下库的可用性。</li>
<li>使用git工具将项目push到自己的github仓库中</li>
<li>realse版本发布的准备<br>当你即将发布自己的库到cocopods的时候，你需要先使用命令<code>pod lib lint</code>来检查下pod描述文件是否有错误，确认无误，给你的项目打上版本tag,并且push,命令如下</li>
</ul>
<pre><code>$ git add -A &amp;&amp; git commit -m &quot;Release 0.0.1.&quot;

$ git tag &apos;0.0.1&apos;

$ git push --tags
</code></pre><ul>
<li>部署自己的库<br>在部署前先要进行错误检查，使用命令<code>pod lib lint</code>和<code>pod spec lint</code>,二者的区别在于，前者只会进行本地校验，后者进行github仓库和tag校验。</li>
<li>将pod描述文件推送到pod服务器，网络畅通情况下，一到两分钟就能看到成功的结果，命令如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　pod trunk push NAME.podspec</span><br></pre></td></tr></table></figure>
<p>完成后搜索下自己传上去的库，<code>pod search NAME</code>,最好能自己试用一下。</p>
]]></content>
    </entry>
    
  
  
</search>
