<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Cocopods高级教程]]></title>
      <url>http://yoursite.com/2016/05/17/Cocopods%E9%AB%98%E7%BA%A7%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h2 id="cocopods安装"><a href="#cocopods安装" class="headerlink" title="cocopods安装"></a>cocopods安装</h2><p>　　本教程默认Mac已经安装Ruby环境，如果没有安装Ruby，请自行搜索。　<br>　　如果电脑没有安装cocopods,打开终端输入以下命令：        </p>
<pre><code>$ sudo gem install cocoapods
</code></pre><p>　如果由于网络原因无法下载cocopods，那么我建议你使用淘宝镜像下载，具体的方式请自行搜索，并非本文重点。<br>如果已经安装，那么我建议你将cocopods更新到最新稳定版本，命令与上面一样。        </p>
<h2 id="使用cocopods拉取远依赖库"><a href="#使用cocopods拉取远依赖库" class="headerlink" title="使用cocopods拉取远依赖库"></a>使用cocopods拉取远依赖库</h2><p>　　在拉取之前你必须确定你已经安装了cocopods。步骤如下<br><a id="more"></a></p>
<ul>
<li>创建一个新的ios项目</li>
<li>打开电脑终端窗口 <code>$ cd</code> 进入你的项目根目录</li>
<li>使用$ <code>pod init</code> 命令创建一个Podfile文件</li>
<li>第一行你应当定义你支持的平台和版本，比如<br><code>platform :ios, &#39;9.0&#39;</code></li>
<li><p>创建目标应用部分，使用 <code>target &#39;$TARGET_NAME&#39; do</code> 开头和 <code>end</code>结束，例如        </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target &apos;MyApp&apos; do</span><br><span class="line">pod &apos;ObjectiveSugar&apos;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
</li>
<li><p>然后保存的你Podfile文件，执行 <code>$ pod install</code> 命令，将会自动创建新文件</p>
</li>
<li>找到文件中的  <code>&#39;$TARGET_NAME&#39;.xcworkspace</code>,点击打开，这个文件将是你以后使用的项目打开文件。</li>
</ul>
<h2 id="Pod命令简介"><a href="#Pod命令简介" class="headerlink" title="Pod命令简介"></a>Pod命令简介</h2><p>　　许多开始使用cocopods的新手似乎都不大能分清<code>pod install</code>和<code>pod update</code>的作用</p>
<ul>
<li><code>pod install</code>:第一次给项目安装cocopods时使用，在已经有cocopods环境的项目中添加或者删除依赖库时使用。</li>
<li><code>pod update</code>:主要是用来升级依赖库的版本，其中加上依赖库名字，比如 <code>pod update PODNAME</code>将只更新这个依赖库的版本。<br>如果装载新的依赖库速度过慢，可以使用命令<code>pod install --verbose --no-repo-update</code>来替代<code>pod install</code></li>
</ul>
<h2 id="Podfile文件"><a href="#Podfile文件" class="headerlink" title="Podfile文件"></a>Podfile文件</h2><p>　　支持一个target的podfile可能是这样子的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target &apos;MyApp&apos; do</span><br><span class="line">pod &apos;AFNetworking&apos;, &apos;~&gt; 3.0&apos;</span><br><span class="line">　end</span><br></pre></td></tr></table></figure>
<p>　　如果你有多个target，不同的target使用不同的库，互不影响，那么可能是这样子的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">abstract_target &apos;Shows&apos; do</span><br><span class="line">pod &apos;ShowsKit&apos;</span><br><span class="line">pod &apos;Fabric&apos;</span><br><span class="line"></span><br><span class="line"># Has its own copy of ShowsKit + ShowWebAuth</span><br><span class="line">target &apos;ShowsiOS&apos; do</span><br><span class="line">pod &apos;ShowWebAuth&apos;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"># Has its own copy of ShowsKit + ShowTVAuth</span><br><span class="line">target &apos;ShowsTV&apos; do</span><br><span class="line">pod &apos;ShowTVAuth&apos;</span><br><span class="line">end</span><br><span class="line">en</span><br></pre></td></tr></table></figure>
<h2 id="依赖库的版本"><a href="#依赖库的版本" class="headerlink" title="依赖库的版本"></a>依赖库的版本</h2><ul>
<li><p>如果你希望使用库最新的版本就那么只要：<br><code>pod &#39;SSZipArchive&#39;</code></p>
</li>
<li><p>如果你希望使用库的某个特定版本：<br><code>pod &#39;Objection&#39;, &#39;0.9&#39;</code></p>
</li>
<li><p>使用操作符来定义</p>
</li>
</ul>
<ul>
<li>‘&gt; 0.1’ 任何大于0.1的版本</li>
<li>‘&gt;= 0.1’ 任何大于或者等于0.1的版本</li>
<li>‘&lt; 0.1’ 任何小于0.1的版本</li>
<li>‘&lt;= 0.1’ 任何小于或者等于0.1的版本</li>
<li>‘~&gt; 0.1.2’ 大于等于0.1.2版本，小于0.2版本</li>
<li>‘~&gt; 0.1’ 大于等于0.1版本，小于1.0版本</li>
</ul>
<h2 id="库的路径"><a href="#库的路径" class="headerlink" title="库的路径"></a>库的路径</h2><ul>
<li><p>依赖于本地库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;AFNetworking&apos;, :path =&gt; &apos;~/Documents/AFNetworking&apos;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用github上项目的master主干仓库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;AFNetworking&apos;, :git =&gt; &apos;https://github.com/gowalla/AFNetworking.git&apos;</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用github上项目分支仓库：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;AFNetworking&apos;, :git =&gt; &apos;https://github.com/gowalla/AFNetworking.git&apos;, :branch =&gt; &apos;dev&apos;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用特定的tag版本仓库：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;AFNetworking&apos;, :git =&gt; &apos;https://github.com/gowalla/AFNetworking.git&apos;, :tag =&gt; &apos;0.7.0&apos;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用某次提交的仓库：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod &apos;AFNetworking&apos;, :git =&gt; &apos;https://github.com/gowalla/AFNetworking.git&apos;, :commit =&gt; &apos;082f8319af&apos;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="创建自己的cocopods依赖库"><a href="#创建自己的cocopods依赖库" class="headerlink" title="创建自己的cocopods依赖库"></a>创建自己的cocopods依赖库</h2><p>　　我推荐你用官方自动生成的模板来构建自己的库项目，避免自己动手去构建的错误，比如语法错误，文件位置错误。</p>
<ul>
<li><p>选择好文件位置，创建自己的库项目</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pod lib create MyLib</span><br></pre></td></tr></table></figure>
</li>
<li><p>期间会有些选择，根据自己的需求去打命令选择。主要有    </p>
<ul>
<li>Objective-C or Swift</li>
<li>Making a Demo Application</li>
<li>Choosing a Test Framework</li>
<li>View-based Testing</li>
</ul>
</li>
</ul>
<p>最后的目录如下：</p>
<blockquote>
<p>MyLib<br>├── .travis.yml<br>├── _Pods.xcproject<br>├── Example<br>│   ├── MyLib<br>│   ├── MyLib.xcodeproj<br>│   ├── MyLib.xcworkspace<br>│   ├── Podfile<br>│   ├── Podfile.lock<br>│   ├── Pods<br>│   └── Tests<br>├── LICENSE<br>├── MyLib.podspec<br>├── Pod<br>│   ├── Assets<br>│   └── Classes<br>│     └── RemoveMe.[swift/m]<br>└── README.md</p>
</blockquote>
<p>–<br>　　这个文件中自动包含了license , readme.md , pod描述文件。你所要做的事情就是将你的代码嵌入进去，并修改 podspec中的summary描述文字，<code>&lt;GITHUB NAME&gt;</code>为你的github账户名，可选的修改和添加其他字段属性。在修改spec文件的时候要注意语法错误往往都是双引号或者单引号引起的，有的文本编辑器默认更改了了spec文件的双引号和单引号类型，你可以更正过来，一般单引号都是使用键盘上面数字1左边的的键位上的单引号，双引号可以复制其他正确引用的单引号。<br>　　Pod文件是你存放自己的库的地方，Example是库的使用示例代码，你可以向使用者展示下如何使用你的库。<br>　　注意，如果你的库是由swift语言编写，那么你需要将需要暴露给使用者的类，接口，和方法等等声明为public，否则可能会出现访问不到该类的情况。</p>
<ul>
<li>将自己的库代码嵌入项目<br>在xcode编辑界面中，将自己的库代码放入 Development Pods文件夹，然后执行<code>pod update</code>,注意库的权限一定要是public，然后项目重新编译一下。在需要使用到库的类中导入库  <code>import ANNetworking</code> ，我建议你在自己的Example中检查下库的可用性。</li>
<li>使用git工具将项目push到自己的github仓库中</li>
<li>realse版本发布的准备<br>当你即将发布自己的库到cocopods的时候，你需要先使用命令<code>pod lib lint</code>来检查下pod描述文件是否有错误，确认无误，给你的项目打上版本tag,并且push,命令如下</li>
</ul>
<pre><code>$ git add -A &amp;&amp; git commit -m &quot;Release 0.0.1.&quot;

$ git tag &apos;0.0.1&apos;

$ git push --tags
</code></pre><ul>
<li>部署自己的库<br>在部署前先要进行错误检查，使用命令<code>pod lib lint</code>和<code>pod spec lint</code>,二者的区别在于，前者只会进行本地校验，后者进行github仓库和tag校验。</li>
<li>将pod描述文件推送到pod服务器，网络畅通情况下，一到两分钟就能看到成功的结果，命令如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　　pod trunk push NAME.podspec</span><br></pre></td></tr></table></figure>
<p>完成后搜索下自己传上去的库，<code>pod search NAME</code>,最好能自己试用一下。</p>
]]></content>
    </entry>
    
  
  
</search>
